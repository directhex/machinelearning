################################################################################
# ML.NET's official, signed build
################################################################################

variables:
- name: BuildConfig
  value: Release
- name: _BuildConfig
  value: $(BuildConfig)
- name: OfficialBuildId
  value: $(BUILD.BUILDNUMBER)
- name: DOTNET_CLI_TELEMETRY_OPTOUT
  value: 1
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: 1
- name: DOTNET_MULTILEVEL_LOOKUP
  value: 0
- name: Codeql.Enabled
  value: true
- name: Codeql.SkipTaskAutoInjection
  value: True  #default to not inject CodeQL tasks, we'll enable it in a single job.
- template: /eng/common/templates/variables/pool-providers.yml@self

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows
    containers:
      CentosContainer: 
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-stream8-mlnet
      UbuntuCrossArmContainer: 
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-mlnet-cross-arm
      UbuntuCrossArm64Container:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-mlnet-cross-arm64
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: build
      displayName: Build
      jobs:
      ################################################################################
      - job: Linux_x64
      ################################################################################
        pool:
          name: $(DncEngInternalBuildPool)
          image: 1es-ubuntu-2204-pt
          os: linux
        container: CentosContainer
        steps:
        # Only build native assets to avoid conflicts.
        - script: ./build.sh -configuration $(BuildConfig) -projects $(Build.SourcesDirectory)/src/Native/Native.proj /p:TargetArchitecture=x64 /p:CopyPackageAssets=true
          displayName: Build Native Assets

        - task: PublishBuildArtifacts@1
          displayName: Publish Linux package assets
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/artifacts/pkgassets
            artifactName: pkgassets
            artifactType: container

        - template: /eng/common/templates/steps/generate-sbom.yml@self

      ################################################################################
      - job: Linux_arm
      ################################################################################
        variables:
          ROOTFS_DIR: '/crossrootfs/arm'
        pool:
          name: $(DncEngInternalBuildPool)
          image: 1es-ubuntu-2204-pt
          os: linux
        container: UbuntuCrossArmContainer
        steps:
        # Only build native assets to avoid conflicts.
        - script: ./build.sh -configuration $(BuildConfig) -projects $(Build.SourcesDirectory)/src/Native/Native.proj /p:TargetArchitecture=arm /p:CopyPackageAssets=true
          displayName: Build Native Assets

        - task: PublishBuildArtifacts@1
          displayName: Publish Linux_arm package assets
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/artifacts/pkgassets
            artifactName: pkgassets
            artifactType: container

        - template: /eng/common/templates/steps/generate-sbom.yml@self

      ################################################################################
      - job: Linux_arm64
      ################################################################################
        variables:
          ROOTFS_DIR: '/crossrootfs/arm64'
        pool:
          name: $(DncEngInternalBuildPool)
          image: 1es-ubuntu-2204-pt
          os: linux
        container: UbuntuCrossArm64Container
        steps:
        # Only build native assets to avoid conflicts.
        - script: ./build.sh -configuration $(BuildConfig) -projects $(Build.SourcesDirectory)/src/Native/Native.proj /p:TargetArchitecture=arm64 /p:CopyPackageAssets=true
          displayName: Build Native Assets

        - task: PublishBuildArtifacts@1
          displayName: Publish Linux_arm64 package assets
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/artifacts/pkgassets
            artifactName: pkgassets
            artifactType: container

        - template: /eng/common/templates/steps/generate-sbom.yml@self

      ################################################################################
      - job: MacOS
      ################################################################################
        pool:
          name: Azure Pipelines
          vmImage: macOS-12
          os: macOS
        steps:
        - script: export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 &&  rm '/usr/local/bin/2to3-3.11' && brew unlink libomp && brew install $(Build.SourcesDirectory)/build/libomp.rb --build-from-source --formula
          displayName: Install build dependencies
        # Only build native assets to avoid conflicts.
        - script: ./build.sh -projects $(Build.SourcesDirectory)/src/Native/Native.proj -configuration $(BuildConfig) /p:TargetArchitecture=x64 /p:CopyPackageAssets=true
          displayName: Build Native Assets

        - task: PublishBuildArtifacts@1
          displayName: Publish macOS package assets
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/artifacts/pkgassets
            artifactName: pkgassets
            artifactType: container

        - template: /eng/common/templates/steps/generate-sbom.yml@self

      ################################################################################
      - job: MacOS_Apple_Silicon
      ################################################################################
        pool:
          name: Azure Pipelines
          vmImage: macOS-12
          os: macOS
        steps:
        # Work around MacOS Homebrew image/environment bug: https://github.com/actions/virtual-environments/issues/2322#issuecomment-749211076
        - script: |
            rm -rf /usr/local/bin/2to3
          displayName: MacOS Homebrew bug Workaround
          continueOnError: true
        - script: brew update && brew install libomp && brew link libomp --force
          displayName: Install build dependencies
        # Only build native assets to avoid conflicts.
        - script: ./build.sh -projects $(Build.SourcesDirectory)/src/Native/Native.proj -configuration $(BuildConfig) /p:TargetArchitecture=arm64 /p:CopyPackageAssets=true
          displayName: Build Native Assets

        - task: PublishBuildArtifacts@1
          displayName: Publish macOS_M1 package assets
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/artifacts/pkgassets
            artifactName: pkgassets
            artifactType: container

        - template: /eng/common/templates/steps/generate-sbom.yml@self

      ################################################################################
      - job: Windows_arm64
      ################################################################################
        pool:
          name: $(DncEngInternalBuildPool)
          image: 1es-windows-2022-pt
          os: windows
        steps:
        # Only build native assets to avoid conflicts.
        - script: ./build.cmd -projects $(Build.SourcesDirectory)/src/Native/Native.proj -configuration $(BuildConfig) /p:TargetArchitecture=arm64 /p:CopyPackageAssets=true
          displayName: Build Native Assets

        - task: PublishBuildArtifacts@1
          displayName: Publish Windows_arm64 package assets
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/artifacts/pkgassets
            artifactName: pkgassets
            artifactType: container

        - template: /eng/common/templates/steps/generate-sbom.yml@self

        # Terminate all dotnet build processes.
        - script: $(Build.SourcesDirectory)/.dotnet/dotnet.exe build-server shutdown
          displayName: Dotnet Server Shutdown

      ################################################################################
      - job: Windows_x86
      ################################################################################
        variables:
          _TeamName: DotNetCore
        pool:
          name: $(DncEngInternalBuildPool)
          image: 1es-windows-2022-pt
          os: windows
        steps:
        # Only build native assets to avoid conflicts.
        - script: ./build.cmd -projects $(Build.SourcesDirectory)/src/Native/Native.proj -configuration $(BuildConfig) /p:TargetArchitecture=x86 /p:CopyPackageAssets=true
          displayName: Build Native Assets

        - task: PublishBuildArtifacts@1
          displayName: Publish Windows_x86 package assets
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/artifacts/pkgassets
            artifactName: pkgassets
            artifactType: container

        - template: /eng/common/templates/steps/generate-sbom.yml@self

        # Terminate all dotnet build processes.
        - script: $(Build.SourcesDirectory)/.dotnet/dotnet.exe build-server shutdown
          displayName: Dotnet Server Shutdown

      ################################################################################
      - job: Windows_x64
      ################################################################################
        variables:
          Codeql.SkipTaskAutoInjection: False  # run CodeQL in this job
          _TeamName: DotNetCore
        pool:
          name: $(DncEngInternalBuildPool)
          image: 1es-windows-2022-pt
          os: windows
        steps:

        # Build both native and managed assets.
        - script: ./build.cmd -configuration $(BuildConfig) /p:TargetArchitecture=x64 /p:CopyPackageAssets=true
          displayName: Build

        - task: ComponentGovernanceComponentDetection@0
          inputs:
            scanType: 'Register'
            verbosity: 'Verbose'
            alertWarningLevel: 'High'

        - task: PublishBuildArtifacts@1
          displayName: Publish Windows_x64 package assets
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/artifacts/pkgassets
            artifactName: pkgassets
            artifactType: container

        - template: /eng/common/templates/steps/generate-sbom.yml@self

        # Terminate all dotnet build processes.
        - script: $(Build.SourcesDirectory)/.dotnet/dotnet.exe build-server shutdown
          displayName: Dotnet Server Shutdown

      ################################################################################
      - template: /eng/common/templates/job/job.yml
        parameters:
          name: Package
      ################################################################################
          artifacts:
            publish:
              artifacts: false
              logs: true
              manifests: true
          enableMicrobuild: true
          enablePublishUsingPipelines: true
          enableSourceIndex: true
          dependsOn:
          - Linux_x64
          - Linux_arm
          - Linux_arm64
          - MacOS
          - Windows_x86
          - Windows_x64
          - MacOS_Apple_Silicon
          variables:
            - DotnetVersionKind: $[variables.VERSIONKIND] # If no "VERSIONKIND" variable is set when queuing the publishing task, this defaults to empty string.
            - NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            - _SignType: real
            - _TeamName: DotNetCore
            - _InternalBuildArgs: /p:DotNetSignType=$(_SignType)
                                  /p:TeamName=$(_TeamName)
                                  /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                                  /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
                                  /p:OfficialBuildId=$(OfficialBuildId)
                                  /p:DotNetPublishUsingPipelines=$true
          pool:
            name: $(DncEngInternalBuildPool)
            image: 1es-windows-2022-pt
            os: windows
          steps:

          # Download all agent packages from all previous phases
          - task: DownloadBuildArtifacts@0
            displayName: Download package assets
            inputs:
              artifactName: pkgassets
              downloadPath: $(Build.SourcesDirectory)/artifacts

          # Depending on the value of DotNetFinalVersionKind, the name of the package will change.
          # For our nightly builds we want it to be empty, and when creating the official nugets, we want it to be "release"
          # the value of the version kind is set when queuing the publishing job on AzureDevOps by adding a VERSIONKIND variable
          # See more info in: https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/Versioning.md#package-version
          - script: ./build.cmd -configuration $(BuildConfig) -pack -sign -publish -ci /p:DotNetFinalVersionKind=$(DotnetVersionKind) $(_InternalBuildArgs)
            displayName: Build Packages

          # Terminate all dotnet build processes.
          - script: $(Build.SourcesDirectory)/.dotnet/dotnet.exe build-server shutdown
            displayName: Dotnet Server Shutdown

      - template: /eng/common/templates/job/publish-build-assets.yml
        parameters:
          dependsOn: Package
          enablePublishBuildArtifacts: true
          publishAssetsImmediately: true
          publishUsingPipelines: true
          pool:
            name: $(DncEngInternalBuildPool)
            image: 1es-windows-2022-pt
            os: windows

    - template: /eng/common/templates/post-build/post-build.yml
      parameters:
        publishingInfraVersion: 3
        # This is to enable SDL runs part of Post-Build Validation Stage
        SDLValidationParameters:
          enable: true
          publishGdn: true
          continueOnError: false
          params: ' -SourceToolsList @("policheck","credscan")
          -TsaInstanceURL https://devdiv.visualstudio.com/
          -TsaProjectName DEVDIV
          -TsaNotificationEmail mlnetcore@microsoft.com
          -TsaCodebaseAdmin REDMOND\ericstj
          -TsaBugAreaPath "DevDiv\Net Libraries"
          -TsaIterationPath DevDiv
          -TsaRepositoryName machinelearning
          -TsaCodebaseName machinelearning
          -TsaPublish $True'